"use strict";function _classCallCheck(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,n){for(var r=0;r<n.length;r++){var t=n[r];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}function _createClass(e,n,r){return n&&_defineProperties(e.prototype,n),r&&_defineProperties(e,r),e}function fluid_init(){var v=document.getElementsByTagName("canvas")[0];v.width=v.clientWidth,v.height=v.clientHeight;var e=v.getAttribute("data-fluid-bg")?v.getAttribute("data-fluid-bg"):"#02030F",n=v.getAttribute("data-sim-resol")?v.getAttribute("data-sim-resol"):128,r=v.getAttribute("data-quality")?v.getAttribute("data-quality"):256,t=v.getAttribute("data-density")?v.getAttribute("data-density"):.97,i=v.getAttribute("data-vorticity")?v.getAttribute("data-vorticity"):30,o=v.getAttribute("data-splat-radius")?v.getAttribute("data-splat-radius"):.5,a=function(e){var n=0,r=0,t=0;4==e.length?(n="0x"+e[1]+e[1],r="0x"+e[2]+e[2],t="0x"+e[3]+e[3]):7==e.length&&(n="0x"+e[1]+e[2],r="0x"+e[3]+e[4],t="0x"+e[5]+e[6]);return{r:n,g:r,b:t}}(e),u=!!v.getAttribute("data-transparent")&&JSON.parse(v.getAttribute("data-transparent")),c={SIM_RESOLUTION:n,DYE_RESOLUTION:r,DENSITY_DISSIPATION:t,VELOCITY_DISSIPATION:.98,PRESSURE_DISSIPATION:.8,PRESSURE_ITERATIONS:20,COLOR_UPDATE_SPEED:10,CURL:i,SPLAT_RADIUS:o,SHADING:!1,COLORFUL:!0,PAUSED:!1,BACK_COLOR:{r:a.r,g:a.g,b:a.b},TRANSPARENT:u,BLOOM:!0,BLOOM_ITERATIONS:8,BLOOM_RESOLUTION:256,BLOOM_INTENSITY:.8,BLOOM_THRESHOLD:.6,BLOOM_SOFT_KNEE:.7};function f(e){var n=window.devicePixelRatio||1;return Math.floor(e*n)}function l(){this.id=-1,this.x=0,this.y=0,this.dx=0,this.dy=0,this.down=!1,this.moved=!1,this.color=[30,0,300]}document.querySelector(".nicol").addEventListener("touchstart",function(e){var n=e.targetTouches;for(null==m&&(m=new l);n.length>=m.length;)m.push(new l);for(var r=document.querySelector(".nicol"),t=r.getBoundingClientRect(),i=0;i<n.length;i++){var o=f(n[i].clientX-t.x),a=f(n[i].clientY-t.y);m[i].id=n[i].identifier,m[i].down=!0,m[i].x=n[i].clientX,m[i].y=n[i].clientY,m[i].dx=8*(n[i].clientX-m[i].x),m[i].dy=8*(n[i].clientY-m[i].y),m[i].texcoordX=o/parseFloat(r.offsetWidth),m[i].texcoordY=1-a/parseFloat(r.offsetHeight),m[i].prevTexcoordX=m[i].texcoordX,m[i].prevTexcoordY=m[i].texcoordY,m[i].color=xe()}}),document.querySelector(".nicol").addEventListener("touchmove",function(e){for(var n=e.targetTouches,r=document.querySelector(".nicol"),t=r.getBoundingClientRect(),i=0;i<n.length;i++){var o=m[i],a=f(n[i].clientX-t.x),u=f(n[i].clientY-t.y);o.moved=o.down,o.dx=8*(n[i].clientX-o.x),o.dy=8*(n[i].clientY-o.y),o.texcoordX=a/parseFloat(r.offsetWidth),o.texcoordY=1-u/parseFloat(r.offsetHeight),o.prevTexcoordX=o.texcoordX,o.prevTexcoordY=o.texcoordY,o.deltaX=function(e){var n=v.width/v.height;n<1&&(e*=n);return e}(o.texcoordX-o.prevTexcoordX),o.deltaY=function(e){var n=v.width/v.height;1<n&&(e/=n);return e}(o.texcoordY-o.prevTexcoordY),o.x=n[i].clientX,o.y=n[i].clientY}});var m=[],s=[],g=[];m.push(new l);var h=function(e){var n={alpha:!0,depth:!1,stencil:!1,antialias:!1,preserveDrawingBuffer:!1},r=e.getContext("webgl2",n),t=!!r;t||(r=e.getContext("webgl",n)||e.getContext("experimental-webgl",n));n=t?(r.getExtension("EXT_color_buffer_float"),r.getExtension("OES_texture_float_linear")):(a=r.getExtension("OES_texture_half_float"),r.getExtension("OES_texture_half_float_linear"));r.clearColor(0,0,0,1);var i,o,a=t?r.HALF_FLOAT:a.HALF_FLOAT_OES;t=t?(i=x(r,r.RGBA16F,r.RGBA,a),o=x(r,r.RG16F,r.RG,a),x(r,r.R16F,r.RED,a)):(i=x(r,r.RGBA,r.RGBA,a),o=x(r,r.RGBA,r.RGBA,a),x(r,r.RGBA,r.RGBA,a));return{gl:r,ext:{formatRGBA:i,formatRG:o,formatR:t,halfFloatTexType:a,supportLinearFiltering:n}}}(v),d=h.gl,T=h.ext;function x(e,n,r,t){if(!function(e,n,r,t){var i=e.createTexture();e.bindTexture(e.TEXTURE_2D,i),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texImage2D(e.TEXTURE_2D,0,n,4,4,0,r,t,null);t=e.createFramebuffer();return e.bindFramebuffer(e.FRAMEBUFFER,t),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,i,0),e.checkFramebufferStatus(e.FRAMEBUFFER)==e.FRAMEBUFFER_COMPLETE}(e,n,r,t))switch(n){case e.R16F:return x(e,e.RG16F,e.RG,t);case e.RG16F:return x(e,e.RGBA16F,e.RGBA,t);default:return null}return{internalFormat:n,format:r}}/Mobi|Android/i.test(navigator.userAgent)&&(c.SHADING=!1),T.supportLinearFiltering||(c.SHADING=!1,c.BLOOM=!1);var E=function(){function o(e,n){if(_classCallCheck(this,o),this.uniforms={},this.program=d.createProgram(),d.attachShader(this.program,e),d.attachShader(this.program,n),d.linkProgram(this.program),!d.getProgramParameter(this.program,d.LINK_STATUS))throw d.getProgramInfoLog(this.program);for(var r=d.getProgramParameter(this.program,d.ACTIVE_UNIFORMS),t=0;t<r;t++){var i=d.getActiveUniform(this.program,t).name;this.uniforms[i]=d.getUniformLocation(this.program,i)}}return _createClass(o,[{key:"bind",value:function(){d.useProgram(this.program)}}]),o}();function p(e,n){e=d.createShader(e);if(d.shaderSource(e,n),d.compileShader(e),!d.getShaderParameter(e,d.COMPILE_STATUS))throw d.getShaderInfoLog(e);return e}var R,D,_,y,A,b,S,L,F,U,B,w=p(d.VERTEX_SHADER,"\n        precision highp float;\n    \n        attribute vec2 aPosition;\n        varying vec2 vUv;\n        varying vec2 vL;\n        varying vec2 vR;\n        varying vec2 vT;\n        varying vec2 vB;\n        uniform vec2 texelSize;\n    \n        void main () {\n            vUv = aPosition * 0.5 + 0.5;\n            vL = vUv - vec2(texelSize.x, 0.0);\n            vR = vUv + vec2(texelSize.x, 0.0);\n            vT = vUv + vec2(0.0, texelSize.y);\n            vB = vUv - vec2(0.0, texelSize.y);\n            gl_Position = vec4(aPosition, 0.0, 1.0);\n        }\n    "),O=p(d.FRAGMENT_SHADER,"\n        precision mediump float;\n        precision mediump sampler2D;\n    \n        varying highp vec2 vUv;\n        uniform sampler2D uTexture;\n        uniform float value;\n    \n        void main () {\n            gl_FragColor = value * texture2D(uTexture, vUv);\n        }\n    "),C=p(d.FRAGMENT_SHADER,"\n        precision mediump float;\n    \n        uniform vec4 color;\n    \n        void main () {\n            gl_FragColor = color;\n        }\n    "),N=p(d.FRAGMENT_SHADER,"\n        precision highp float;\n        precision highp sampler2D;\n    \n        varying vec2 vUv;\n        uniform sampler2D uTexture;\n        uniform float aspectRatio;\n    \n        #define SCALE 25.0\n    \n        void main () {\n            vec2 uv = floor(vUv * SCALE * vec2(aspectRatio, 1.0));\n            float v = mod(uv.x + uv.y, 2.0);\n            v = v * 0.1 + 0.8;\n            gl_FragColor = vec4(vec3(v), 1.0);\n        }\n    "),I=p(d.FRAGMENT_SHADER,"\n        precision highp float;\n        precision highp sampler2D;\n    \n        varying vec2 vUv;\n        uniform sampler2D uTexture;\n    \n        void main () {\n            vec3 C = texture2D(uTexture, vUv).rgb;\n            float a = max(C.r, max(C.g, C.b));\n            gl_FragColor = vec4(C, a);\n        }\n    "),P=p(d.FRAGMENT_SHADER,"\n        precision highp float;\n        precision highp sampler2D;\n    \n        varying vec2 vUv;\n        uniform sampler2D uTexture;\n        uniform sampler2D uBloom;\n        uniform sampler2D uDithering;\n        uniform vec2 ditherScale;\n    \n        void main () {\n            vec3 C = texture2D(uTexture, vUv).rgb;\n            vec3 bloom = texture2D(uBloom, vUv).rgb;\n            vec3 noise = texture2D(uDithering, vUv * ditherScale).rgb;\n            noise = noise * 2.0 - 1.0;\n            bloom += noise / 800.0;\n            bloom = pow(bloom.rgb, vec3(1.0 / 2.2));\n            C += bloom;\n            float a = max(C.r, max(C.g, C.b));\n            gl_FragColor = vec4(C, a);\n        }\n    "),M=p(d.FRAGMENT_SHADER,"\n        precision highp float;\n        precision highp sampler2D;\n    \n        varying vec2 vUv;\n        varying vec2 vL;\n        varying vec2 vR;\n        varying vec2 vT;\n        varying vec2 vB;\n        uniform sampler2D uTexture;\n        uniform vec2 texelSize;\n    \n        void main () {\n            vec3 L = texture2D(uTexture, vL).rgb;\n            vec3 R = texture2D(uTexture, vR).rgb;\n            vec3 T = texture2D(uTexture, vT).rgb;\n            vec3 B = texture2D(uTexture, vB).rgb;\n            vec3 C = texture2D(uTexture, vUv).rgb;\n    \n            float dx = length(R) - length(L);\n            float dy = length(T) - length(B);\n    \n            vec3 n = normalize(vec3(dx, dy, length(texelSize)));\n            vec3 l = vec3(0.0, 0.0, 1.0);\n    \n            float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\n            C.rgb *= diffuse;\n    \n            float a = max(C.r, max(C.g, C.b));\n            gl_FragColor = vec4(C, a);\n        }\n    "),G=p(d.FRAGMENT_SHADER,"\n        precision highp float;\n        precision highp sampler2D;\n    \n        varying vec2 vUv;\n        varying vec2 vL;\n        varying vec2 vR;\n        varying vec2 vT;\n        varying vec2 vB;\n        uniform sampler2D uTexture;\n        uniform sampler2D uBloom;\n        uniform sampler2D uDithering;\n        uniform vec2 ditherScale;\n        uniform vec2 texelSize;\n    \n        void main () {\n            vec3 L = texture2D(uTexture, vL).rgb;\n            vec3 R = texture2D(uTexture, vR).rgb;\n            vec3 T = texture2D(uTexture, vT).rgb;\n            vec3 B = texture2D(uTexture, vB).rgb;\n            vec3 C = texture2D(uTexture, vUv).rgb;\n    \n            float dx = length(R) - length(L);\n            float dy = length(T) - length(B);\n    \n            vec3 n = normalize(vec3(dx, dy, length(texelSize)));\n            vec3 l = vec3(0.0, 0.0, 1.0);\n    \n            float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\n            C *= diffuse;\n    \n            vec3 bloom = texture2D(uBloom, vUv).rgb;\n            vec3 noise = texture2D(uDithering, vUv * ditherScale).rgb;\n            noise = noise * 2.0 - 1.0;\n            bloom += noise / 800.0;\n            bloom = pow(bloom.rgb, vec3(1.0 / 2.2));\n            C += bloom;\n    \n            float a = max(C.r, max(C.g, C.b));\n            gl_FragColor = vec4(C, a);\n        }\n    "),X=p(d.FRAGMENT_SHADER,"\n        precision mediump float;\n        precision mediump sampler2D;\n    \n        varying vec2 vUv;\n        uniform sampler2D uTexture;\n        uniform vec3 curve;\n        uniform float threshold;\n    \n        void main () {\n            vec3 c = texture2D(uTexture, vUv).rgb;\n            float br = max(c.r, max(c.g, c.b));\n            float rq = clamp(br - curve.x, 0.0, curve.y);\n            rq = curve.z * rq * rq;\n            c *= max(rq, br - threshold) / max(br, 0.0001);\n            gl_FragColor = vec4(c, 0.0);\n        }\n    "),H=p(d.FRAGMENT_SHADER,"\n        precision mediump float;\n        precision mediump sampler2D;\n    \n        varying vec2 vL;\n        varying vec2 vR;\n        varying vec2 vT;\n        varying vec2 vB;\n        uniform sampler2D uTexture;\n    \n        void main () {\n            vec4 sum = vec4(0.0);\n            sum += texture2D(uTexture, vL);\n            sum += texture2D(uTexture, vR);\n            sum += texture2D(uTexture, vT);\n            sum += texture2D(uTexture, vB);\n            sum *= 0.25;\n            gl_FragColor = sum;\n        }\n    "),e=p(d.FRAGMENT_SHADER,"\n        precision mediump float;\n        precision mediump sampler2D;\n    \n        varying vec2 vL;\n        varying vec2 vR;\n        varying vec2 vT;\n        varying vec2 vB;\n        uniform sampler2D uTexture;\n        uniform float intensity;\n    \n        void main () {\n            vec4 sum = vec4(0.0);\n            sum += texture2D(uTexture, vL);\n            sum += texture2D(uTexture, vR);\n            sum += texture2D(uTexture, vT);\n            sum += texture2D(uTexture, vB);\n            sum *= 0.25;\n            gl_FragColor = sum * intensity;\n        }\n    "),n=p(d.FRAGMENT_SHADER,"\n        precision highp float;\n        precision highp sampler2D;\n    \n        varying vec2 vUv;\n        uniform sampler2D uTarget;\n        uniform float aspectRatio;\n        uniform vec3 color;\n        uniform vec2 point;\n        uniform float radius;\n    \n        void main () {\n            vec2 p = vUv - point.xy;\n            p.x *= aspectRatio;\n            vec3 splat = exp(-dot(p, p) / radius) * color;\n            vec3 base = texture2D(uTarget, vUv).xyz;\n            gl_FragColor = vec4(base + splat, 1.0);\n        }\n    "),r=p(d.FRAGMENT_SHADER,"\n        precision highp float;\n        precision highp sampler2D;\n    \n        varying vec2 vUv;\n        uniform sampler2D uVelocity;\n        uniform sampler2D uSource;\n        uniform vec2 texelSize;\n        uniform vec2 dyeTexelSize;\n        uniform float dt;\n        uniform float dissipation;\n    \n        vec4 bilerp (sampler2D sam, vec2 uv, vec2 tsize) {\n            vec2 st = uv / tsize - 0.5;\n    \n            vec2 iuv = floor(st);\n            vec2 fuv = fract(st);\n    \n            vec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);\n            vec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);\n            vec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);\n            vec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);\n    \n            return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);\n        }\n    \n        void main () {\n            vec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;\n            gl_FragColor = dissipation * bilerp(uSource, coord, dyeTexelSize);\n            gl_FragColor.a = 1.0;\n        }\n    "),t=p(d.FRAGMENT_SHADER,"\n        precision highp float;\n        precision highp sampler2D;\n    \n        varying vec2 vUv;\n        uniform sampler2D uVelocity;\n        uniform sampler2D uSource;\n        uniform vec2 texelSize;\n        uniform float dt;\n        uniform float dissipation;\n    \n        void main () {\n            vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\n            gl_FragColor = dissipation * texture2D(uSource, coord);\n            gl_FragColor.a = 1.0;\n        }\n    "),i=p(d.FRAGMENT_SHADER,"\n        precision mediump float;\n        precision mediump sampler2D;\n    \n        varying highp vec2 vUv;\n        varying highp vec2 vL;\n        varying highp vec2 vR;\n        varying highp vec2 vT;\n        varying highp vec2 vB;\n        uniform sampler2D uVelocity;\n    \n        void main () {\n            float L = texture2D(uVelocity, vL).x;\n            float R = texture2D(uVelocity, vR).x;\n            float T = texture2D(uVelocity, vT).y;\n            float B = texture2D(uVelocity, vB).y;\n    \n            vec2 C = texture2D(uVelocity, vUv).xy;\n            if (vL.x < 0.0) { L = -C.x; }\n            if (vR.x > 1.0) { R = -C.x; }\n            if (vT.y > 1.0) { T = -C.y; }\n            if (vB.y < 0.0) { B = -C.y; }\n    \n            float div = 0.5 * (R - L + T - B);\n            gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\n        }\n    "),o=p(d.FRAGMENT_SHADER,"\n        precision mediump float;\n        precision mediump sampler2D;\n    \n        varying highp vec2 vUv;\n        varying highp vec2 vL;\n        varying highp vec2 vR;\n        varying highp vec2 vT;\n        varying highp vec2 vB;\n        uniform sampler2D uVelocity;\n    \n        void main () {\n            float L = texture2D(uVelocity, vL).y;\n            float R = texture2D(uVelocity, vR).y;\n            float T = texture2D(uVelocity, vT).x;\n            float B = texture2D(uVelocity, vB).x;\n            float vorticity = R - L - T + B;\n            gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);\n        }\n    "),a=p(d.FRAGMENT_SHADER,"\n        precision highp float;\n        precision highp sampler2D;\n    \n        varying vec2 vUv;\n        varying vec2 vL;\n        varying vec2 vR;\n        varying vec2 vT;\n        varying vec2 vB;\n        uniform sampler2D uVelocity;\n        uniform sampler2D uCurl;\n        uniform float curl;\n        uniform float dt;\n    \n        void main () {\n            float L = texture2D(uCurl, vL).x;\n            float R = texture2D(uCurl, vR).x;\n            float T = texture2D(uCurl, vT).x;\n            float B = texture2D(uCurl, vB).x;\n            float C = texture2D(uCurl, vUv).x;\n    \n            vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));\n            force /= length(force) + 0.0001;\n            force *= curl * C;\n            force.y *= -1.0;\n    \n            vec2 vel = texture2D(uVelocity, vUv).xy;\n            gl_FragColor = vec4(vel + force * dt, 0.0, 1.0);\n        }\n    "),u=p(d.FRAGMENT_SHADER,"\n        precision mediump float;\n        precision mediump sampler2D;\n    \n        varying highp vec2 vUv;\n        varying highp vec2 vL;\n        varying highp vec2 vR;\n        varying highp vec2 vT;\n        varying highp vec2 vB;\n        uniform sampler2D uPressure;\n        uniform sampler2D uDivergence;\n    \n        vec2 boundary (vec2 uv) {\n            return uv;\n            // uncomment if you use wrap or repeat texture mode\n            // uv = min(max(uv, 0.0), 1.0);\n            // return uv;\n        }\n    \n        void main () {\n            float L = texture2D(uPressure, boundary(vL)).x;\n            float R = texture2D(uPressure, boundary(vR)).x;\n            float T = texture2D(uPressure, boundary(vT)).x;\n            float B = texture2D(uPressure, boundary(vB)).x;\n            float C = texture2D(uPressure, vUv).x;\n            float divergence = texture2D(uDivergence, vUv).x;\n            float pressure = (L + R + B + T - divergence) * 0.25;\n            gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\n        }\n    "),h=p(d.FRAGMENT_SHADER,"\n        precision mediump float;\n        precision mediump sampler2D;\n    \n        varying highp vec2 vUv;\n        varying highp vec2 vL;\n        varying highp vec2 vR;\n        varying highp vec2 vT;\n        varying highp vec2 vB;\n        uniform sampler2D uPressure;\n        uniform sampler2D uVelocity;\n    \n        vec2 boundary (vec2 uv) {\n            return uv;\n            // uv = min(max(uv, 0.0), 1.0);\n            // return uv;\n        }\n    \n        void main () {\n            float L = texture2D(uPressure, boundary(vL)).x;\n            float R = texture2D(uPressure, boundary(vR)).x;\n            float T = texture2D(uPressure, boundary(vT)).x;\n            float B = texture2D(uPressure, boundary(vB)).x;\n            vec2 velocity = texture2D(uVelocity, vUv).xy;\n            velocity.xy -= vec2(R - L, T - B);\n            gl_FragColor = vec4(velocity, 0.0, 1.0);\n        }\n    "),z=(d.bindBuffer(d.ARRAY_BUFFER,d.createBuffer()),d.bufferData(d.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,1,1,-1]),d.STATIC_DRAW),d.bindBuffer(d.ELEMENT_ARRAY_BUFFER,d.createBuffer()),d.bufferData(d.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,0,2,3]),d.STATIC_DRAW),d.vertexAttribPointer(0,2,d.FLOAT,!1,0,0),d.enableVertexAttribArray(0),function(e){d.bindFramebuffer(d.FRAMEBUFFER,e),d.drawElements(d.TRIANGLES,6,d.UNSIGNED_SHORT,0)}),V=(B=d.createTexture(),d.bindTexture(d.TEXTURE_2D,B),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_MIN_FILTER,d.LINEAR),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_MAG_FILTER,d.LINEAR),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_WRAP_S,d.REPEAT),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_WRAP_T,d.REPEAT),d.texImage2D(d.TEXTURE_2D,0,d.RGB,1,1,0,d.RGB,d.UNSIGNED_BYTE,new Uint8Array([255,255,255])),{texture:B,width:1,height:1,attach:function(e){return d.activeTexture(d.TEXTURE0+e),d.bindTexture(d.TEXTURE_2D,B),e}}),Y=new E(w,O),W=new E(w,C),k=new E(w,N),q=new E(w,I),K=new E(w,P),j=new E(w,M),J=new E(w,G),Q=new E(w,X),Z=new E(w,H),$=new E(w,e),ee=new E(w,n),ne=new E(w,T.supportLinearFiltering?t:r),re=new E(w,i),te=new E(w,o),ie=new E(w,a),oe=new E(w,u),ae=new E(w,h);function ue(){var e=Ee(c.SIM_RESOLUTION),n=Ee(c.DYE_RESOLUTION);R=e.width,D=e.height,_=n.width,y=n.height;var r=T.halfFloatTexType,t=T.formatRGBA,i=T.formatRG,e=T.formatR,n=T.supportLinearFiltering?d.LINEAR:d.NEAREST;A=null==A?fe(_,y,t.internalFormat,t.format,r,n):ce(A,_,y,t.internalFormat,t.format,r,n),b=null==b?fe(R,D,i.internalFormat,i.format,r,n):ce(b,R,D,i.internalFormat,i.format,r,n),S=ve(R,D,e.internalFormat,e.format,r,d.NEAREST),L=ve(R,D,e.internalFormat,e.format,r,d.NEAREST),F=fe(R,D,e.internalFormat,e.format,r,d.NEAREST),function(){var e=Ee(c.BLOOM_RESOLUTION),n=T.halfFloatTexType,r=T.formatRGBA,t=T.supportLinearFiltering?d.LINEAR:d.NEAREST;U=ve(e.width,e.height,r.internalFormat,r.format,n,t);for(var i=g.length=0;i<c.BLOOM_ITERATIONS;i++){var o=e.width>>i+1,a=e.height>>i+1;if(o<2||a<2)break;a=ve(o,a,r.internalFormat,r.format,n,t);g.push(a)}}()}function ve(e,n,r,t,i,o){d.activeTexture(d.TEXTURE0);var a=d.createTexture();d.bindTexture(d.TEXTURE_2D,a),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_MIN_FILTER,o),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_MAG_FILTER,o),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_WRAP_S,d.CLAMP_TO_EDGE),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_WRAP_T,d.CLAMP_TO_EDGE),d.texImage2D(d.TEXTURE_2D,0,r,e,n,0,t,i,null);i=d.createFramebuffer();return d.bindFramebuffer(d.FRAMEBUFFER,i),d.framebufferTexture2D(d.FRAMEBUFFER,d.COLOR_ATTACHMENT0,d.TEXTURE_2D,a,0),d.viewport(0,0,e,n),d.clear(d.COLOR_BUFFER_BIT),{texture:a,fbo:i,width:e,height:n,attach:function(e){return d.activeTexture(d.TEXTURE0+e),d.bindTexture(d.TEXTURE_2D,a),e}}}function fe(e,n,r,t,i,o){var a=ve(e,n,r,t,i,o),u=ve(e,n,r,t,i,o);return{get read(){return a},set read(e){a=e},get write(){return u},set write(e){u=e},swap:function(){var e=a;a=u,u=e}}}function ce(e,n,r,t,i,o,a){var u,v;return e.read=(u=e.read,v=ve(n,r,t,i,o,v=a),Y.bind(),d.uniform1i(Y.uniforms.uTexture,u.attach(0)),d.uniform1f(Y.uniforms.value,1),z(v.fbo),v),e.write=ve(n,r,t,i,o,a),e}ue(),de(parseInt(20*Math.random())+5);var le=Date.now();function me(){0<s.length&&de(s.pop());for(var e=0;e<m.length;e++){var n=m[e];n.moved&&(he(n.x,n.y,n.dx,n.dy,n.color),n.moved=!1)}if(c.COLORFUL&&le+100<Date.now()){le=Date.now();for(var r=0;r<m.length;r++)m[r].color=xe()}}function se(e){d.disable(d.BLEND),d.viewport(0,0,R,D),te.bind(),d.uniform2f(te.uniforms.texelSize,1/R,1/D),d.uniform1i(te.uniforms.uVelocity,b.read.attach(0)),z(L.fbo),ie.bind(),d.uniform2f(ie.uniforms.texelSize,1/R,1/D),d.uniform1i(ie.uniforms.uVelocity,b.read.attach(0)),d.uniform1i(ie.uniforms.uCurl,L.attach(1)),d.uniform1f(ie.uniforms.curl,c.CURL),d.uniform1f(ie.uniforms.dt,e),z(b.write.fbo),b.swap(),re.bind(),d.uniform2f(re.uniforms.texelSize,1/R,1/D),d.uniform1i(re.uniforms.uVelocity,b.read.attach(0)),z(S.fbo),Y.bind(),d.uniform1i(Y.uniforms.uTexture,F.read.attach(0)),d.uniform1f(Y.uniforms.value,c.PRESSURE_DISSIPATION),z(F.write.fbo),F.swap(),oe.bind(),d.uniform2f(oe.uniforms.texelSize,1/R,1/D),d.uniform1i(oe.uniforms.uDivergence,S.attach(0));for(var n=0;n<c.PRESSURE_ITERATIONS;n++)d.uniform1i(oe.uniforms.uPressure,F.read.attach(1)),z(F.write.fbo),F.swap();ae.bind(),d.uniform2f(ae.uniforms.texelSize,1/R,1/D),d.uniform1i(ae.uniforms.uPressure,F.read.attach(0)),d.uniform1i(ae.uniforms.uVelocity,b.read.attach(1)),z(b.write.fbo),b.swap(),ne.bind(),d.uniform2f(ne.uniforms.texelSize,1/R,1/D),T.supportLinearFiltering||d.uniform2f(ne.uniforms.dyeTexelSize,1/R,1/D);var r=b.read.attach(0);d.uniform1i(ne.uniforms.uVelocity,r),d.uniform1i(ne.uniforms.uSource,r),d.uniform1f(ne.uniforms.dt,e),d.uniform1f(ne.uniforms.dissipation,c.VELOCITY_DISSIPATION),z(b.write.fbo),b.swap(),d.viewport(0,0,_,y),T.supportLinearFiltering||d.uniform2f(ne.uniforms.dyeTexelSize,1/_,1/y),d.uniform1i(ne.uniforms.uVelocity,b.read.attach(0)),d.uniform1i(ne.uniforms.uSource,A.read.attach(1)),d.uniform1f(ne.uniforms.dissipation,c.DENSITY_DISSIPATION),z(A.write.fbo),A.swap()}function ge(e){c.BLOOM&&function(e,n){if(!(g.length<2)){var r=n;d.disable(d.BLEND),Q.bind();var t=c.BLOOM_THRESHOLD*c.BLOOM_SOFT_KNEE+1e-4,i=c.BLOOM_THRESHOLD-t,o=2*t,t=.25/t;d.uniform3f(Q.uniforms.curve,i,o,t),d.uniform1f(Q.uniforms.threshold,c.BLOOM_THRESHOLD),d.uniform1i(Q.uniforms.uTexture,e.attach(0)),d.viewport(0,0,r.width,r.height),z(r.fbo),Z.bind();for(var a=0;a<g.length;a++){var u=g[a];d.uniform2f(Z.uniforms.texelSize,1/r.width,1/r.height),d.uniform1i(Z.uniforms.uTexture,r.attach(0)),d.viewport(0,0,u.width,u.height),z(u.fbo),r=u}d.blendFunc(d.ONE,d.ONE),d.enable(d.BLEND);for(var v=g.length-2;0<=v;v--){var f=g[v];d.uniform2f(Z.uniforms.texelSize,1/r.width,1/r.height),d.uniform1i(Z.uniforms.uTexture,r.attach(0)),d.viewport(0,0,f.width,f.height),z(f.fbo),r=f}d.disable(d.BLEND),$.bind(),d.uniform2f($.uniforms.texelSize,1/r.width,1/r.height),d.uniform1i($.uniforms.uTexture,r.attach(0)),d.uniform1f($.uniforms.intensity,c.BLOOM_INTENSITY),d.viewport(0,0,n.width,n.height),z(n.fbo)}}(A.read,U),null!=e&&c.TRANSPARENT?d.disable(d.BLEND):(d.blendFunc(d.ONE,d.ONE_MINUS_SRC_ALPHA),d.enable(d.BLEND));var n,r,t=null==e?d.drawingBufferWidth:_,i=null==e?d.drawingBufferHeight:y;d.viewport(0,0,t,i),c.TRANSPARENT||(W.bind(),n=c.BACK_COLOR,d.uniform4f(W.uniforms.color,n.r/255,n.g/255,n.b/255,1),z(e)),null==e&&c.TRANSPARENT&&(k.bind(),d.uniform1f(k.uniforms.aspectRatio,v.width/v.height),z(null)),c.SHADING?((n=c.BLOOM?J:j).bind(),d.uniform2f(n.uniforms.texelSize,1/t,1/i),d.uniform1i(n.uniforms.uTexture,A.read.attach(0)),c.BLOOM&&(d.uniform1i(n.uniforms.uBloom,U.attach(1)),d.uniform1i(n.uniforms.uDithering,V.attach(2)),r=pe(V,t,i),d.uniform2f(n.uniforms.ditherScale,r.x,r.y))):((r=c.BLOOM?K:q).bind(),d.uniform1i(r.uniforms.uTexture,A.read.attach(0)),c.BLOOM&&(d.uniform1i(r.uniforms.uBloom,U.attach(1)),d.uniform1i(r.uniforms.uDithering,V.attach(2)),i=pe(V,t,i),d.uniform2f(r.uniforms.ditherScale,i.x,i.y))),z(e)}function he(e,n,r,t,i){d.viewport(0,0,R,D),ee.bind(),d.uniform1i(ee.uniforms.uTarget,b.read.attach(0)),d.uniform1f(ee.uniforms.aspectRatio,v.width/v.height),d.uniform2f(ee.uniforms.point,e/v.width,1-n/v.height),d.uniform3f(ee.uniforms.color,r,-t,1),d.uniform1f(ee.uniforms.radius,c.SPLAT_RADIUS/100),z(b.write.fbo),b.swap(),d.viewport(0,0,_,y),d.uniform1i(ee.uniforms.uTarget,A.read.attach(0)),d.uniform3f(ee.uniforms.color,i.r,i.g,i.b),z(A.write.fbo),A.swap()}function de(e){for(var n=0;n<e;n++){var r=xe();r.r*=10,r.g*=10,r.b*=10,he(v.width*Math.random(),v.height*Math.random(),1e3*(Math.random()-.5),1e3*(Math.random()-.5),r)}}function Te(){v.width==v.clientWidth&&v.height==v.clientHeight||(v.width=v.clientWidth,v.height=v.clientHeight,ue())}function xe(){var e=function(e,n,r){var t,i,o,a,u,v,f;switch(a=Math.floor(6*e),u=r*(1-n),v=r*(1-(e=6*e-a)*n),f=r*(1-(1-e)*n),a%6){case 0:t=r,i=f,o=u;break;case 1:t=v,i=r,o=u;break;case 2:t=u,i=r,o=f;break;case 3:t=u,i=v,o=r;break;case 4:t=f,i=u,o=r;break;case 5:t=r,i=u,o=v}return{r:t,g:i,b:o}}(Math.random(),1,1);return e.r*=.15,e.g*=.15,e.b*=.15,e}function Ee(e){var n=d.drawingBufferWidth/d.drawingBufferHeight;n<1&&(n=1/n);n=Math.round(e*n),e=Math.round(e);return d.drawingBufferWidth>d.drawingBufferHeight?{width:n,height:e}:{width:e,height:n}}function pe(e,n,r){return{x:n/e.width,y:r/e.height}}!function e(){Te();me();c.PAUSED||se(.016);ge(null);requestAnimationFrame(e)}();h=document.querySelector(".nicol-boom");null!==h&&h.addEventListener("click",function(e){de(parseInt(20*Math.random())+5)})}window.ajax_flag?fluid_init():window.onload=function(){fluid_init()};